{"version":3,"sources":["views/Home/components/CardValue.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","utils/getTimePeriods.ts","hooks/useBlock.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/index.ts"],"names":["CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","Hero","styled","div","theme","mediaQueries","lg","Cards","BaseLayout","sm","Countdown","Home","useI18n","location","useLocation","useState","blocksRemaining","secondsUntilStart","startBlockNum","setState","currentBlock","useBlock","hours","minutes","seconds","timeUntil","setTimeUntil","displayTimer","setDisplayTimer","ref","URLSearchParams","search","get","Buffer","from","toString","window","localStorage","getItem","setItem","a","console","log","secs","Math","ceil","getTimePeriods","fetchProgress","as","size","mb","color","style","display","marginTop","letterSpacing","fontFamily","fontWeight","lineHeight","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","StyledCakeStats","Card","Row","CakeStats","TranslateString","burnedBalance","farms","useFarms","eggPrice","usePriceCakeBusd","circSupply","minus","cakeSupply","getBalanceNumber","marketCap","times","eggPerBlock","pow","toNumber","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","height","chrome","width","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","delta","timeLeft","years","months","days","floor","useContext","BlockContext","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","fetchBalances","CakeHarvestBalance","earningsSum","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","Block","CardImage","img","Label","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","reduce","accum","earning","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","src","alt","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton"],"mappings":"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","file":"static/js/7.64b38293.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React, {useEffect, useState} from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useHistory,\n    useLocation\n} from \"react-router-dom\";\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport BigNumber from \"bignumber.js\";\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport getTimePeriods from \"../../utils/getTimePeriods\";\nimport useBlock from \"../../hooks/useBlock\";\n\n\nconst Hero = styled.div`\n    align-items: center;\n  background-image: url('/images/egg/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  font-weight:600;\n  text-align: center;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Countdown = styled.div`\n  color: white;\n  font-size: 20px;\n  font-weight: 600;\n  text-align: center;\n  text-transform:uppercase\n  display:block;\n  background:#673ab7;\n  width:400px;\n  margin:40px auto;\n  padding:20px;\n  border-radius:20px;\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n    const location = useLocation();\n    const [state, setState] = useState({\n        blocksRemaining: 0,\n        secondsUntilStart: 0,\n        startBlockNum: 0,\n    })\n\n    const currentBlock = useBlock()\n\n    const [timeUntil, setTimeUntil] = useState({hours: 0, minutes: 0, seconds: 0});\n    const [displayTimer, setDisplayTimer] = useState(false);\n\n    useEffect(() => {\n\n        const params = new URLSearchParams(location.search)\n        const ref = params.get('ref')\n        const base64 = (Buffer.from('0x').toString('base64'));\n        const currRef = window.localStorage.getItem('ref');\n\n        if(!currRef) {\n            window.localStorage.setItem('ref', '0kMHg0NzU5YmZCNDdBQjJGODM0RUQzOTBmNDUzNTNlQmFlYkRCNDViOGJi')\n        }\n\n        if(ref) {\n            window.localStorage.setItem('ref', ref)\n        }\n\n        const fetchProgress = async () => {\n            if (currentBlock > 15294500) {\n                setDisplayTimer(false)\n            } else if (currentBlock > 0) {\n                setDisplayTimer(true)\n                console.log('current block', currentBlock)\n                const secs = Math.ceil((15294500 - currentBlock) * 2.05)\n                setTimeUntil(getTimePeriods(secs));\n            }\n        }\n\n        fetchProgress()\n\n    }, [location,currentBlock, setState, setTimeUntil, setDisplayTimer])\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n            <div style={{display:'inline-block', marginTop:'41px', letterSpacing: '5px', fontSize:'52px',fontFamily: '\\'Rajdhani\\', sans-serif'}}>PolyPingu Finance<br/></div>\n            <span style={{fontSize:'16px', fontFamily: '\\'Raleway\\', sans-serif', fontWeight:300}}>\n                <br/>Deflationary Sustainable Yield Automated Market Maker (AMM) <br style={{lineHeight:'10px'}}/>with Hybrid Burn Vaults on Polygon</span>\n        </Heading>\n      </Hero>\n        {displayTimer ?  (\n        <Countdown>{`${timeUntil.hours}h, ${timeUntil.minutes}m until farming starts`}</Countdown>\n        ) : (<></>)}\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let eggPerBlock = 0;\n  if(farms && farms[0] && farms[0].eggPerBlock){\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Pingu Stats\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New Pingu/block')}</Text>\n          <Text bold fontSize=\"14px\">{eggPerBlock}</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'polypingu'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingPingu',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingPingu',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'Pingu to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'Pingu in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting Pingu')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","export { default } from './Home'\n"],"sourceRoot":""}